(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{427:function(a,t,v){"use strict";v.r(t);var s=v(1),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"bio、aio、nio介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bio、aio、nio介绍"}},[a._v("#")]),a._v(" BIO、AIO、NIO介绍")]),a._v(" "),t("h2",{attrs:{id:"一、概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[a._v("#")]),a._v(" 一、概述")]),a._v(" "),t("p",[a._v("在Java的软件设计开发中，通信架构是不可避免的，我们在进行不\n同系统或者不同进程之间的数据交互，或者在高并发下的通信场景\n下都需要用到网络通信相关的技术，对于一些经验丰富的程序员来\n说，Java早期的网络通信架构存在一些缺陷，其中最令人恼火\n的是基于性能低下的同步阻塞式的I/O通信（BIO），随着互\n联网开发下通信性能的高要求，Java在2002年开始支持了非阻\n塞式的I/O通信技术(NIO)。大多数读者在学习网络通信相关技术\n的时候，都只是接触到零碎的通信技术点，没有完整的技术体\n系架构，以至于对于Java的通信场景总是没有清晰的解决方\n案。")]),a._v(" "),t("h3",{attrs:{id:"通信技术整体要解决的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通信技术整体要解决的问题"}},[a._v("#")]),a._v(" 通信技术整体要解决的问题")]),a._v(" "),t("p",[a._v("局域网内的通信要求。\n多系统间的底层消息传递机制。\n高并发下，大数据量的通信场景需要。\n游戏行业。无论是手游服务端，还是大型的网络游戏，Java\n语言都得到越来越广泛的应用。")]),a._v(" "),t("h2",{attrs:{id:"二、java的i-o演进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、java的i-o演进"}},[a._v("#")]),a._v(" 二、Java的I/O演进")]),a._v(" "),t("p",[a._v("I/O 模型：就是用什么样的通道或者说是通信模式和架构进行数据的传输和接收，很大程度上决定了程序通信的性能，Java 共支持 3 种网络编程的/IO 模型：BIO、NIO、AIO实际通信需求下，要根据不同的业务场景和性能需求决定选择不同的I/O模型。")]),a._v(" "),t("h2",{attrs:{id:"三、java-bio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、java-bio"}},[a._v("#")]),a._v(" 三、Java BIO")]),a._v(" "),t("p",[a._v("同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销")]),a._v(" "),t("h2",{attrs:{id:"四、java-nio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、java-nio"}},[a._v("#")]),a._v(" 四、Java NIO")]),a._v(" "),t("p",[a._v("Java NIO ： 同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求就进行处理 。")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://qin.itsban.cn/202303230051582.png",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"五、aio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、aio"}},[a._v("#")]),a._v(" 五、AIO")]),a._v(" "),t("p",[a._v("Java AIO(NIO.2) ： 异步 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理，一般适用于连接数较多且连接时间较长的应用")]),a._v(" "),t("h2",{attrs:{id:"六、场景分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、场景分析"}},[a._v("#")]),a._v(" 六、场景分析")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解。")])]),a._v(" "),t("li",[t("p",[a._v("NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，JDK1.4 开始支持。")])]),a._v(" "),t("li",[t("p",[a._v("AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);